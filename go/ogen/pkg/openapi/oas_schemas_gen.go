// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"github.com/go-faster/errors"
)

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrdersOrderIDPostReqStatus returns new OptOrdersOrderIDPostReqStatus with value set to v.
func NewOptOrdersOrderIDPostReqStatus(v OrdersOrderIDPostReqStatus) OptOrdersOrderIDPostReqStatus {
	return OptOrdersOrderIDPostReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptOrdersOrderIDPostReqStatus is optional OrdersOrderIDPostReqStatus.
type OptOrdersOrderIDPostReqStatus struct {
	Value OrdersOrderIDPostReqStatus
	Set   bool
}

// IsSet returns true if OptOrdersOrderIDPostReqStatus was set.
func (o OptOrdersOrderIDPostReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrdersOrderIDPostReqStatus) Reset() {
	var v OrdersOrderIDPostReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrdersOrderIDPostReqStatus) SetTo(v OrdersOrderIDPostReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrdersOrderIDPostReqStatus) Get() (v OrdersOrderIDPostReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrdersOrderIDPostReqStatus) Or(d OrdersOrderIDPostReqStatus) OrdersOrderIDPostReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OrdersOrderIDPostBadRequest struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *OrdersOrderIDPostBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *OrdersOrderIDPostBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*OrdersOrderIDPostBadRequest) ordersOrderIDPostRes() {}

type OrdersOrderIDPostOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *OrdersOrderIDPostOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *OrdersOrderIDPostOK) SetMessage(val OptString) {
	s.Message = val
}

func (*OrdersOrderIDPostOK) ordersOrderIDPostRes() {}

type OrdersOrderIDPostReq struct {
	ProjectID int    `json:"project_id"`
	ReturnID  OptInt `json:"return_id"`
	// Pet status in the store.
	Status OptOrdersOrderIDPostReqStatus `json:"status"`
}

// GetProjectID returns the value of ProjectID.
func (s *OrdersOrderIDPostReq) GetProjectID() int {
	return s.ProjectID
}

// GetReturnID returns the value of ReturnID.
func (s *OrdersOrderIDPostReq) GetReturnID() OptInt {
	return s.ReturnID
}

// GetStatus returns the value of Status.
func (s *OrdersOrderIDPostReq) GetStatus() OptOrdersOrderIDPostReqStatus {
	return s.Status
}

// SetProjectID sets the value of ProjectID.
func (s *OrdersOrderIDPostReq) SetProjectID(val int) {
	s.ProjectID = val
}

// SetReturnID sets the value of ReturnID.
func (s *OrdersOrderIDPostReq) SetReturnID(val OptInt) {
	s.ReturnID = val
}

// SetStatus sets the value of Status.
func (s *OrdersOrderIDPostReq) SetStatus(val OptOrdersOrderIDPostReqStatus) {
	s.Status = val
}

// Pet status in the store.
type OrdersOrderIDPostReqStatus string

const (
	OrdersOrderIDPostReqStatusAvailable OrdersOrderIDPostReqStatus = "available"
	OrdersOrderIDPostReqStatusPending   OrdersOrderIDPostReqStatus = "pending"
	OrdersOrderIDPostReqStatusSold      OrdersOrderIDPostReqStatus = "sold"
)

// AllValues returns all OrdersOrderIDPostReqStatus values.
func (OrdersOrderIDPostReqStatus) AllValues() []OrdersOrderIDPostReqStatus {
	return []OrdersOrderIDPostReqStatus{
		OrdersOrderIDPostReqStatusAvailable,
		OrdersOrderIDPostReqStatusPending,
		OrdersOrderIDPostReqStatusSold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrdersOrderIDPostReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrdersOrderIDPostReqStatusAvailable:
		return []byte(s), nil
	case OrdersOrderIDPostReqStatusPending:
		return []byte(s), nil
	case OrdersOrderIDPostReqStatusSold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrdersOrderIDPostReqStatus) UnmarshalText(data []byte) error {
	switch OrdersOrderIDPostReqStatus(data) {
	case OrdersOrderIDPostReqStatusAvailable:
		*s = OrdersOrderIDPostReqStatusAvailable
		return nil
	case OrdersOrderIDPostReqStatusPending:
		*s = OrdersOrderIDPostReqStatusPending
		return nil
	case OrdersOrderIDPostReqStatusSold:
		*s = OrdersOrderIDPostReqStatusSold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
